using UnityEngine;

public class Camera  MonoBehaviour
{
    public Transform target; Reference to the ball's transform
    public float smoothSpeed = 0.125f; Smoothing factor for camera movement
    public Vector3 offset; Offset between the camera and the ball

    private Vector3 velocity = Vector3.zero; Velocity for smooth damping


   void LateUpdate()
    {
    Calculate the desired position for the camera

   Vector3 desiredPosition = target.position + offset;

    Use SmoothDamp to gradually move the camera towards the desired position
   Vector3 smoothedPosition = Vector3.SmoothDamp(transform.position, desiredPosition, ref velocity, smoothSpeed);

    Update the camera's position
        transform.position = smoothedPosition;

    Rotate the camera based on mouse movement
        float mouseX = Input.GetAxis(Mouse X);
    transform.RotateAround(target.position, Vector3.up, mouseX);

    Move the ball in the direction the camera is facing when left click is pressed
        if (Input.GetMouseButton(0))
    {
        Vector3 direction = transform.forward;
        target.GetComponentRigidbody().AddForce(direction, ForceMode.Impulse);
    }
}
}
To use this script, create an empty GameObject in your Unity scene and attach the CameraFollow script to it. Assign the ball's transform to the target variable in the inspector. Adjust the smoothSpeed and offset values to achieve the desired camera movement.

Please note that this is a basic example and may require additional customization based on your specific game mechanics and camera setup.



_____________________________________________________________________________________________________________

using UnityEngine;

public class BallControl : MonoBehaviour
{
    public float forceMultiplier = 10f; // Multiplier for the force applied to the ball
    public float maxForce = 20f; // Maximum force that can be applied to the ball

    private Rigidbody rb; // Reference to the ball's Rigidbody component
    private bool isMoving = false; // Flag to track if the ball is currently moving

    void Start()
    {
        rb = GetComponent<Rigidbody>();
    }

    void Update()
    {
        // Check if the ball is on the ground and not moving
        if (isMoving || !IsBallOnGround())
            return;

        // Get input from the player to control the ball's movement
        float moveHorizontal = Input.GetAxis("Horizontal");
        float moveVertical = Input.GetAxis("Vertical");

        // Calculate the force based on the input
        Vector3 force = new Vector3(moveHorizontal, 0f, moveVertical) * forceMultiplier;

        // Apply the force to the ball
        rb.AddForce(force);

        // Clamp the magnitude of the force to the maximum value
        rb.velocity = Vector3.ClampMagnitude(rb.velocity, maxForce);

        // Set the isMoving flag to true
        isMoving = true;
    }

    bool IsBallOnGround()
    {
        // Check if the ball is touching the ground or any other surface you consider valid
        // Modify this condition based on your specific game environment
        return Physics.Raycast(transform.position, Vector3.down, 0.1f);
    }
}
Attach the BallControl script to your ball GameObject in the scene. Adjust the forceMultiplier and maxForce values to control the force applied to the ball based on your desired gameplay mechanics.

Please note that this script assumes your ball has a Rigidbody component attached to it and requires appropriate collision detection setup in your scene for the IsBallOnGround() method to work correctly. Adjust the method as needed to match your specific game environment and detection requirements.



________________________________________________________________________________________________________________



using UnityEngine;

public class HoleManager : MonoBehaviour
{
    public GameObject[] players; // Array of player GameObjects
    public Transform nextCourse; // Reference to the next course's transform
    public Scoreboard scoreboard; // Reference to the scoreboard script

    private int playersFinishedCount = 0; // Count of players who have finished the hole

    void OnTriggerEnter(Collider other)
    {
        // Check if the ball colliding with the hole belongs to a player
        if (other.CompareTag("Player"))
        {
            // Increment the count of players who have finished the hole
            playersFinishedCount++;

            // Check if all players have finished the hole
            if (playersFinishedCount == players.Length)
            {
                // Move the ball to the next course
                other.transform.position = nextCourse.position;

                // Save scores to the scoreboard
                for (int i = 0; i < players.Length; i++)
                {
                    PlayerScore playerScore = players[i].GetComponent<PlayerScore>();
                    scoreboard.AddScore(playerScore.playerName, playerScore.score);
                }

                // Reset the ball hit counter for all players
                foreach (GameObject player in players)
                {
                    PlayerScore playerScore = player.GetComponent<PlayerScore>();
                    playerScore.ResetScore();
                }

                // Reset the count of players who have finished the hole
                playersFinishedCount = 0;
            }
        }
    }
}
Attach the HoleManager script to the hole GameObject in your scene. Assign the appropriate values to the players array, nextCourse, and scoreboard variables in the inspector.

Make sure each player has a PlayerScore script attached to their respective ball GameObjects. The PlayerScore script should keep track of the player's score and provide a method to reset the score.

The Scoreboard script should handle adding scores to the scoreboard.

Modify the collision detection logic in the OnTriggerEnter method if needed, depending on how you set up your hole and ball collision detection in your game.


______________________________________________________________________________________________



using UnityEngine;

public class GameOptions : MonoBehaviour
{
    public GameObject scoreboard; // Reference to the scoreboard GameObject
    public GameObject gameOptionsPanel; // Reference to the game options panel GameObject

    private bool isShowingOptions = false; // Flag to track if the game options are currently shown

    void Update()
    {
        // Toggle game options on escape key press
        if (Input.GetKeyDown(KeyCode.Escape))
        {
            if (!isShowingOptions)
            {
                // Show the scoreboard and game options panel
                scoreboard.SetActive(true);
                gameOptionsPanel.SetActive(true);
                Time.timeScale = 0f; // Pause the game
            }
            else
            {
                // Hide the scoreboard and game options panel
                scoreboard.SetActive(false);
                gameOptionsPanel.SetActive(false);
                Time.timeScale = 1f; // Resume normal game speed
            }

            isShowingOptions = !isShowingOptions;
        }
    }
}
With this updated script, the scoreboard and game options panel will be shown when the escape key is pressed for the first time. Pressing the escape key again will hide them, and the game will resume with normal controls and speed.

Make sure to assign the appropriate references to the scoreboard and gameOptionsPanel variables in the inspector, and set up your UI elements and functionality accordingly.



________________________________________________________________________________________
